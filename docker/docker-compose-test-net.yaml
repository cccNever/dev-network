version: '3.7'

volumes:
  orderer1.ordererOrg1.example.com:
  peer1.org1.example.com:
  peer1.org2.example.com:


networks:
  test:
    external:
      name: dev

services:

  orderer1.ordererOrg1.example.com:
    container_name: orderer1.ordererOrg1.example.com
    image: hyperledger/fabric-orderer:latest
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_HOST=orderer1.ordererOrg1.example.com
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7155
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg1MSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/keystore/key.pem
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/signcerts/cert.pem
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/tlscacerts/tls-0-0-0-0-7052-tls-ca-node1.pem]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/signcerts/cert.pem
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/keystore/key.pem
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/tlscacerts/tls-0-0-0-0-7052-tls-ca-node1.pem]
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none ##将该字段设置为none，即代表排序节点将以无系统通道方式启动
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      # used for creating channel
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/signcerts/cert.pem ##排序节点Admin服务开启TLS时所使用的证书文件路径
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/keystore/key.pem
      - ORDERER_ADMIN_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/tlscacerts/tls-0-0-0-0-7052-tls-ca-node1.pem]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/var/hyperledger/orderer/tls/tlscacerts/tls-0-0-0-0-7052-tls-ca-node1.pem]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7255 ##排序节点的Admin服务，之后使用osnadmin命令的时候需要联接到该服务上，配置格式为host:port
      #- GODEBUG=netdns=go
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
        - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ../organizations/ordererOrganizations/ordererOrg1.example.com/orderers/orderer1.ordererOrg1.example.com/msp:/var/hyperledger/orderer/msp
        - ../organizations/ordererOrganizations/ordererOrg1.example.com/orderers/orderer1.ordererOrg1.example.com/tls-msp/:/var/hyperledger/orderer/tls
        - orderer1.ordererOrg1.example.com:/var/hyperledger/production/orderer
    ports:
      - 7155:7155
      - 7255:7255
    networks:
      - test

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    image: hyperledger/fabric-peer:latest
    labels:
      service: hyperledger-fabric
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=dev
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp ##Peer节点的本地MSP配置文件的路径。
      - CORE_PEER_GOSSIP_USELEADERELECTION=true ##节点是否使用动态算法选出主导节点，该主导节点将连接 排序服务并使用分发协议从排序服务拉取账本区块。对大型网络建议启用主导节点选举。
      - CORE_PEER_GOSSIP_ORGLEADER=false ##是否静态指定机构的主导节点，该节点将负责维持与排序节点 的连接并向机构中的其他节点分发区块。
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/signcerts/cert.pem
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/keystore/key.pem
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/tlscacerts/tls-0-0-0-0-7052-tls-ca-node1.pem
      # Peer specific variables
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7153 ##同一机构中其他Peer节点要连接此节点需指定的P2P连接地址。 要设置跨机构的P2P连接地址，请使用CORE_PEER_GOSSIP_EXTERNAENDPOINT。
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7153 ##设置或读取peer节点的监听地址。默认情况下Peer节点在所有 地址上监听请求。
      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:7253 ##链码连接该Peer节点的地址。
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7253 ##Peer节点监听链码连接请求的地址。如果未设置该参数，将自动选择节点地址的7052端口。
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:7153 ##设置初始化gossip的引导节点列表，节点启动时将连接 这些引导节点。
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7153 ##向机构外的节点发布的访问端结点。如果未设置该参数，节点 将不为其他机构所知。
      - CORE_PEER_LOCALMSPID=Org1MSP
      #- GODEBUG=netdns=go
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ../organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls-msp:/etc/hyperledger/fabric/tls
        - peer1.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/org1/peer1
    command: peer node start
    ports:
      - 7153:7153
    networks:
      - test

  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    image: hyperledger/fabric-peer:latest
    labels:
      service: hyperledger-fabric
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=dev
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_PEER_GOSSIP_USELEADERELECTION=true ##节点是否使用动态算法选出主导节点，该主导节点将连接 排序服务并使用分发协议从排序服务拉取账本区块。对大型网络建议启用主导节点选举。
      - CORE_PEER_GOSSIP_ORGLEADER=false ##是否静态指定机构的主导节点，该节点将负责维持与排序节点 的连接并向机构中的其他节点分发区块。
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/signcerts/cert.pem
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/keystore/key.pem
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/tlscacerts/tls-0-0-0-0-7052-tls-ca-node1.pem
      # Peer specific variables
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_ADDRESS=peer1.org2.example.com:7154
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7154
      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:7254
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7254
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:7154
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:7154
      - CORE_PEER_LOCALMSPID=Org2MSP
      #- GODEBUG=netdns=go
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ../organizations/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls-msp:/etc/hyperledger/fabric/tls
        - peer1.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/org2/peer1
    command: peer node start
    ports:
      - 7154:7154
    networks:
      - test

  cli-node1:
    container_name: cli-node1
    image: hyperledger/fabric-tools:latest
    labels:
      service: hyperledger-fabric
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      #- GODEBUG=netdns=go
      #- FABRIC_LOGGING_SPEC=DEBUG
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: /bin/bash
    volumes:
      - ../:/opt/gopath/src/github.com/hyperledger/fabric
    depends_on:
      - peer1.org1.example.com
    networks:
      - test

  cli-node2:
    container_name: cli-node2
    image: hyperledger/fabric-tools:latest
    labels:
      service: hyperledger-fabric
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      #- GODEBUG=netdns=go
      #- FABRIC_LOGGING_SPEC=DEBUG
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: /bin/bash
    volumes:
      - ../:/opt/gopath/src/github.com/hyperledger/fabric
    depends_on:
      - peer1.org2.example.com
    networks:
      - test
